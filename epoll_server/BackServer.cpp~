/*************************************************************************
	> File Name: backServe.cpp
	> Author: 
	> Mail: 
	> Created Time: 2018年11月07日 星期三 19时24分31秒
 ************************************************************************/


#include "PThreadPool.h"
#include "PThreadBase.h"
#include "PThreadCond.h"
#include "ShmFIFO.h"
#include "QQPacket.h"
#include "CSinDB.h"
#include "string.h"
#include<vector>
#include<stdlib.h>
#include<iostream>
#include<string.h>
#include<sqlite3.h>
using namespace std;

extern CShmFIFO  m_sendFIFO;
extern CShmFIFO  m_recvFIFO;

/*
#include <sys/types.h>
#include <sys/ipc.h>

#define KEY_FIFO_SEND ftok(".",1)
#define KEY_FIFO_RECV ftok(".",2)
*/
/*使用epoll模型接收多客户端数据，并应答*/
/*****
1. 读recvFIFO
2. 解包
3. 根据包funid处理包，和数据库交互
4. 重新生成返回包(带fd) ，重新修改funid/optid/len/
5. 写入sendFIFO
*/

int match(void *para,int count, char **value,char **name)
{
	requesrt_login *u = (requesrt_login *)para;
	strcpy(u->user,value[1]);
	printf("666666666666\n");
	return 1;
}

int video_count(void *para,int count, char **value,char **name)
{

	int *a = (int *)para;
	*a = atoi(value[0]);
	return 0;		            reply_type *type3 = new reply_type;
}

//获取视频所有信息回调函数
int get_video(void *para, int count, char **value, char **name)
{
	int vcount = 0;
//	CSinDB::GetSinDB()->DoOpera("select count(*) from video", video_count, &vcount);
	printf("count = %d\n",vcount);
	int i = 0;
//	vector<reply_list> *vec = (vector<reply_/list> *)para;
  reply_list video;
  //video.VideoCount = vcount;
  //video.VideoId = atoi(value[i++]);
  //strcpy(video.VideoName,value[i++]);
  //video.VideoName = value[i++];
  //video.VideoAddress = value[i++];
  //strcpy(video.VideoAddress,value[i++]);
  //video.PlayCount = atoi(value[i++]);
  //video.VideoImage = value[i++];
  //strcpy(video.VideoImage,value[i++]);
  //video.RegionId = atoi(value[i++]);
  //video.ChannelId = atoi(value[i++]);
  //video.TypeIds[0] = atoi(value[i++]);
  //video.VideoTime = atoi(value[i++]);
//  vec->push_back(video);
  printf("存入\n");
  
  return 0;
        
        /*  int VideoId;//视频ID
        int RegionId;//地区Id
        int VideoYear;//上映年份
        int TypeIds[10];//类型分类ID，最多十个
        int ChannelId;//频道分类ID  
        char VideoName[20];//视频名
        char VideoImage[256];//图片链接
        char VideoAddress[256];//视频网络链接地址
        int PlayCount;//播放次数
				char IsNew;//1新视频，0旧视频*/
}

class CDTask: public CTask
{
public:
	CDTask(CShmFIFO &send, CQQPacket& packet)
		:m_send(&send), m_packet(packet)
	{
	}
	
	CDTask(){};

	int run()
	{
		//1. unpack
		m_packet.unpack();
		
		//2. deal the packet by funid
		  void *pData = m_packet.getBody();
		switch(m_packet.getHeader()->funid)
		{
			case 0x01://登陆
			{

   		             int tru = 0;
				int nrow,ncolumn,index;
                         char sql[100];
			      char **presult;
		  requesrt_login *plogin = (requesrt_login*) (pData);
    	  sprintf(sql,"select * from user where account = '%s' and password = '%s'",plogin->user,plogin->pwd);
          printf("username:%s || passwd:%s\n",plogin->user,plogin->pwd);
          CSinDB::GetSinDB()->Find_thename(sql,&presult,&nrow,&ncolumn);//匹配数据库
	    printf(" nrow = %d\n",nrow);
   		  if(nrow>0)
   		  {
   		  	tru = 1;		
   		  }
   		  else 
   		  {
   		  	printf("test connect................\n");
   		  }

    	    m_packet.replyLogin(plogin->user,tru);	

    	 // printf("test connect................\n");
    	}
			break;




			case 0x03://type		
			case 0x04:
			case 0x05:
			case 0x06://ALl type		
			{

	 		      int i=0;
				int nrow,ncolumn,index;
                        char sql_5[100];
			      char **presult;
			     VideoType_t *mytype=(VideoType_t*)(pData);
				if(mytype->type_time!=0)
				mytype->type_time=2020-mytype->type_time;
				printf(" the channel %d\n",mytype->type_channel);
				printf(" the type_Afreadid %d\n",mytype->type_Videoid);
				printf(" the videoid  %d\n",mytype->type_Videoid);
				printf(" the time %d\n",mytype->type_time);
			if (mytype->type_Areaid == 0)
			{
				if (mytype->type_Videoid == 0)
				{
					if (mytype->type_time == 0)
						sprintf(sql_5, "select * from video where channel_id = '%d'", mytype->type_channel);
					else if (mytype->type_time == 2014)
						sprintf(sql_5, "select * from video where channel_id = '%d' and time <= '%d'", mytype->type_channel, mytype->type_time);
					else
						sprintf(sql_5, "select * from video where channel_id = '%d' and time = '%d'", mytype->type_channel, mytype->type_time);
				}
				else
				{
					if (mytype->type_time == 0)
						sprintf(sql_5, "select * from video where channel_id = '%d' and type_id = '%d'", mytype->type_channel, mytype->type_Videoid);
					else if (mytype->type_time == 2014)
						sprintf(sql_5, "select * from video where channel_id = '%d' and time <= '%d' and type_id = '%d'", mytype->type_channel, mytype->type_time, mytype->type_Videoid);
					else
						sprintf(sql_5, "select * from video where channel_id = '%d' and time = '%d' and type_id = '%d'", mytype->type_channel, mytype->type_time, mytype->type_Videoid);
				}
			}
			else
			{
				if (mytype->type_Videoid == 0)
				{
					if (mytype->type_time == 0)
						sprintf(sql_5, "select * from video where channel_id = '%d'and region_id ='%d'", mytype->type_channel, mytype->type_Areaid);
					else if (mytype->type_time == 2014)
						sprintf(sql_5, "select * from video where channel_id = '%d'and region_id ='%d' and time <='%d'", mytype->type_channel, mytype->type_Areaid, mytype->type_time);
					else
						sprintf(sql_5, "select * from video where channel_id = '%d'and region_id ='%d' and time = '%d'", mytype->type_channel, mytype->type_Areaid, mytype->type_time);
				}
				else
				{
					if (mytype->type_time == 0)
						sprintf(sql_5, "select * from video where channel_id = '%d'and region_id ='%d' and type_id = '%d'", mytype->type_channel, mytype->type_Areaid, mytype->type_Videoid);
					else if (mytype->type_time == 2014)
						sprintf(sql_5, "select * from video where channel_id = '%d'and region_id ='%d' and time <='%d' and type_id = '%d'", mytype->type_channel, mytype->type_Areaid, mytype->type_time, mytype->type_Videoid);
					else
						sprintf(sql_5, "select * from video where channel_id = '%d'and region_id ='%d' and time ='%d' and type_id = '%d'", mytype->type_channel, mytype->type_Areaid, mytype->type_time, mytype->type_Videoid);
				}
			}


	     CSinDB::GetSinDB()->Find_thename(sql_5,&presult,&nrow,&ncolumn);//匹配数据库
	      printf("nrow =%d  ||   ncolum= %d\n",nrow,ncolumn);
		for( i = 0; i < nrow ; i++)
		{
			index=atoi(presult[(i+1)*ncolumn]);
			//printf("index =%d \n",index);

                   if(m_packet.getHeader()->funid==0x04)
		          m_packet.retype(i,index,2);
			else if(m_packet.getHeader()->funid==0x05)
			     m_packet.retype(i,index,3);
			else if(m_packet.getHeader()->funid==0x03)
			     m_packet.retype(i,index,1);
			else if(m_packet.getHeader()->funid==0x06)
			     m_packet.retype(i,index,4);

		}
		if(i==0)
		{
                   if(m_packet.getHeader()->funid==0x04)
		          m_packet.retype(0,0,2);
			else if(m_packet.getHeader()->funid==0x05)
			     m_packet.retype(0,0,3);
			else if(m_packet.getHeader()->funid==0x03)
			     m_packet.retype(0,0,1);
			else if(m_packet.getHeader()->funid==0x06)
			     m_packet.retype(0,0,4);
		}
		  m_packet.retype(i,index,2);
			}
			break;







			case 0x07:
			{
                        int i=0;
				int nrow,ncolumn,index;
                        char sql_2[100];
			      char **presult;

			     VideoRecord_t *search_video=(VideoRecord_t*)(pData);
                   //     strcopy(test->user_name,search_video->user_name);
					
                printf("/search_video->user_name %s\n",search_video->user_name);
       sprintf(sql_2,"select * from user where account = '%s'",search_video->user_name);

     CSinDB::GetSinDB()->Find_thename(sql_2,&presult,&nrow,&ncolumn);//匹配数据库


    //  printf("nrow =%d  ||   ncolum= %d\n",nrow,ncolumn);
                printf("/row =%d  ncolmu=%d\n",nrow,ncolumn);
		index=atoi(presult[(i+1)*ncolumn]);
                printf("/index = %d\n",index);
		i=(int)((search_video->video_seek)*100);
		printf("index =%d i= %d\n",index,i);
		CSinDB::GetSinDB()->recording_add(i,index,search_video->video_id);
	       m_packet.the_result(1);
				 
			}
			break;



			case 0x09:
			{
			      int i=0;
				int nrow,ncolumn;
				float index;
                        char sql_3[100];
			      char **presult;
			     PlayHistory_t *search_percent=(PlayHistory_t*)(pData);
					
                    sprintf(sql_3,"select * from recording where user_id = '%s' and video_id = '%d'",search_percent->user_name,search_percent->video_id);
     CSinDB::GetSinDB()->Find_thename(sql_3,&presult,&nrow,&ncolumn);//匹配数据库


    //  printf("nrow =%d  ||   ncolum= %d\n",nrow,ncolumn);
		index=atof(presult[3*ncolumn]);
                printf("/index = %f\n",index);
		index/=100;
		printf("index =%f  \n",index);
	       m_packet.re_percent(search_percent->video_id,index);
			}
			break;



			case 0x11://视频数据
			{

		    reply_list *video = (reply_list *)(pData);
		    char recv[256];
		    int i = 0;
		    memcpy(recv,video->VideoName,sizeof(video->VideoName));
		    
		    if(strcmp(video->VideoName,"huijiadeyouhuo") == 0)
		    {
		    	i = 1;
		    	printf("yes %d\n",i);
		    }
		    else if(strcmp(video->VideoName,"wulinwaizhuan") == 0)
		    {
		    	i = 1;
		    	printf("yes %d\n",i);
		    }
		    else if(strcmp(video->VideoName,"gangtiexia") == 0)
		    {
		    	i = 1;
		    	printf("yes %d\n",i);
		    }
		    else if(strcmp(video->VideoName,"meiguoduizhang") == 0)
		    {
		    	i = 1;
		    	printf("yes %d\n",i);
		    }
		    else if(strcmp(video->VideoName,"mingzhentankenan") == 0)
		    {
		    	i = 1;
		    	printf("yes %d\n",i);
		    }
		    else if(strcmp(video->VideoName,"labixiaoxin") == 0)
		    {
		    	i = 1;
		    	printf("yes %d\n",i);
		    }
		    else if(strcmp(video->VideoName,"huoyingrenzhe") == 0)
		    {
		    	i = 1;
		    	printf("yes %d\n",i);
		    }
		    else
		   	{
		    	printf("no\n");
		    	i = 0;
		    }
		    printf("recv = %s\n",recv);
		    
		    
		    m_packet.replay(video->VideoName,i);
		    
		    
			}
			break;
			case 0x10://注册
			{
				int tru = 0;
				requesrt_login *user = new requesrt_login;
				requesrt_login *regist = (requesrt_login*) (pData);
        char sql[100];
    	  sprintf(sql,"select * from user where account = '%s'",regist->user);
        
 //  		  CSinDB::GetSinDB()->DoOpera(sql,&match,user);//匹配数据库
   		  
   		  printf("%s\n",user->user);
   		  printf("%s\n",regist->user);
   		  printf("%d\n",tru);
   		  
   		  if(strcmp(user->user,regist->user) == 0)
   		  	tru = 0;
   		  else
   		  {
//   		  	CSinDB::GetSinDB()->user_add(0,regist->pwd,regist->user);
   		  		tru = 1;
   		  }
   		  		
   		  printf("%d\n",tru);
   		  	
   		  m_packet.replyLogin(regist->user,tru);
			}
		break;

		}

		//3. return packet
		m_packet.pack();
		m_send->write(m_packet.getData());
		return 0;
	}

private:
	CShmFIFO *m_send;
	CQQPacket m_packet;
	
};


class CBackServer
{
public:
	CBackServer()
	{
		m_pool = new CThreadPool(20, 5, 5);
		m_sendFIFO.open(KEY_FIFO_SEND, m_packet.getSize(), 100);
		m_recvFIFO.open(KEY_FIFO_RECV, m_packet.getSize(), 100);
	}
	~CBackServer(){};

	int run()
	{
		while(1)
		{
			//1. read from recvFIFO
			m_recvFIFO.read(m_packet.getData());

			//2. create task
			CDTask *t = new CDTask(m_sendFIFO, m_packet);

			//3. add task to pool
			m_pool->addTask(t);
		}

		return 0;
	}
	
private:
		CQQPacket m_packet;
 //   CShmFIFO  m_sendFIFO;
  //  CShmFIFO  m_recvFIFO;
    
    CPThreadMutex m_mutex; // for client
    CThreadPool *m_pool;
};

int main()
{
	CBackServer back;

	back.run();
}



